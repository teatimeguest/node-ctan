> _This is an unofficial documentation of the CTAN API
> based on CTAN's help pages.
> All rights regarding the API belong to the CTAN team._

# {{= data.api.info?.title ?? '' }} {{= data.version }}

[![View specification]({{= data.source.badge }})]({{= data.source.path }})

{{=
  data.format.relink(data.api.info.description ?? '')
    .replace(/(?<=Changes from )Version (\d+\.\d+)/u, '[$&](./$1.md)')
}}
{{? data.api.externalDocs?.url }}
<div align="right"><sup>{{= data.api.externalDocs.url }}&nbsp;&#x29c9;</sup></div>
{{?}}

{{ if (data.api.servers?.length == 1) { }}
**Base URL:** `{{= data.api.servers[0].url }}`
{{ } else if (data.api.servers?.length > 1) { }}
**Base URLs:**
{{~ data.api.servers.map(({ url }) => url) :url }}
- `{{= url }}`{{~}}
{{ } }}

{{ for (const [tag, resource] of Object.entries(data.resources)) { }}
# {{? tag === 'Default' }}Table of Contents{{??}}{{= tag }}{{?}}

{{ for (const [summary, { slug, verb }] of Object.entries(resource.methods)) { }}
- [`{{= verb.toUpperCase() }}`&ensp;{{= summary }}](#{{= slug }}){{ } }}

{{= resource.description ?? '' }}

{{? resource.externalDocs?.url }}
<div align="right"><sup>{{= resource.externalDocs.url }}&nbsp;&#x29c9;</sup></div>
{{?}}

{{
  for (const [method, { operation, path, verb }] of Object.entries(resource.methods)) {
    const { description, externalDocs, parameters, requestBody, summary } = operation;
    data.method = resource.methods[method];
    data.operation = operation;
    data.parameters = parameters;
    data.utils.fakeProdCons(data);
    data.utils.fakeBodyParameter(data);
    data.utils.mergePathParameters(data);
    data.utils.getParameters(data);
}}
## {{= method }}

<b>

> ```http
> {{= verb.toUpperCase() }} {{= path }}
> ```

</b>

{{? summary && !data.options.tocSummary }}*{{= summary }}*{{?}}

{{= data.format.relink(description ?? '') }}
{{? externalDocs?.url }}
<div align="right"><sup>{{= externalDocs.url }}&nbsp;&#x29c9;</sup></div>
{{?}}
{{? requestBody }}> Body parameter
{{? data.bodyParameter.exampleValues.description }}
> {{= data.bodyParameter.exampleValues.description }}{{?}}
{{?}}

{{? parameters?.length }}
### Parameters

|Name|In|Type|Description|
|---|---|---|---|{{~ parameters.flatMap((p) => data.format.parameter(p)) :row }}
|{{= row.displayName }}|{{= row.in }}|{{= row.safeType }}|{{= row.description }}|{{~}}
{{?}}

### Responses

{{~ data.utils.getResponses(data).map((r) => data.format.response(r)) :response }}
<details><summary>{{= response.summary }}</summary>{{
  for (const [contentType, tables] of Object.entries(response.content)) {
}}<p>
<b>

> ```http
> Content-Type: {{= contentType }}
> ```

</b>
{{ let depth = 0; for (const { rows, title } of tables) { }}{{? title }}
{{? title === 'oneOf' && ++depth }}<dl><dt>{{= title }}</dt><dd><p>
{{??}}{{? title === 'continued' && depth-- }}</p></dd></dl>

{{?}}{{? title === 'xor' }}_{{= title }}_{{?}}{{?}}{{?}}
{{? rows.length }}
|Name|Type|Description|
|---|---|---|{{~ rows :row }}
|{{= row.displayName }}|{{= row.safeType }}|{{= row.description }}|{{~}}
{{?}}

{{ } }}{{ while (depth--) { }}</p></dd></dl>
{{ } }}</p>{{ } }}</details>{{~}}

{{? (data.responseHeaders = data.utils.getResponseHeaders(data)).length }}
### Response Headers

|Status|Header|Type|Format|Description|
|---|---|---|---|---|{{~ data.responseHeaders :h}}
|{{=h.status}}|{{=h.header}}|{{=h.type}}|{{=h.format??''}}|{{=h.description??''}}|
{{~}}
{{?}}

<div align="right"><a href="#table-of-contents" title="Back to TOC">&#9650;</a></div>
{{ } /* of methods */ }}
{{ } /* of resources */ }}

---

<sup>Generated by [Widdershins v{{= data.widdershins.version }}](https://github.com/Mermade/widdershins)</sup>
