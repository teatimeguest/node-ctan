openapi: 3.1.0
info:
  title: Querying the CTAN Database with JSON
  description: |
    The CTAN provides mean to access the database and
    retrieve the information in form of JSON responses.
    Several entities can be queried.

    The queries can be sent to the portal
    in form of a HTTP `GET` or `POST` request with some parameters.
    The response has the JSON as body.
    The request URL and parameters as well as the response are
    described on the detail section.

    > **Changes from Version 1.0**
    >
    > - Service method [`licenses`](#/paths/~1json~11.1~1licenses/get) added.
    > - Service method [`version`](#/paths/~1json~11.1~1version/get) added.
  version: '1.1'
externalDocs:
  url: https://ctan.org/help/json/1.1
servers:
  - url: https://ctan.org
paths:
  /json/1.1/authors:
    get:
      summary: List of Authors
      description: |
        The list of authors can be obtained under the URL
        ```url
        https://ctan.org/json/1.1/authors
        ```
        The result is a JSON list as in the following listing:
        ```json
        [
          { "key": "aakerlund", "givenname": "Johan", "familyname": "Aakerlund" },
          { "key": "aas", "givenname": "American Astronomical Society", "familyname": "" },
          { "key": "aavatsmark", "givenname": "Ivar", "familyname": "Aavatsmark" },
          { "key": "abhinandan", "givenname": "S. P.", "familyname": "Abhinandan" },
          { "key": "abraham", "givenname": "Paul", "familyname": "Abraham" },
          { "key": "abrahams", "givenname": "Paul W.", "familyname": "Abrahams" },
          "..."
        ]
        ```
        The authors contained in this list are
        ordered ascending on the key of the author.

        Note that the authors information does not contain
        the email address of the author to protect the privacy.

        #### Selecting

        The list can be restricted to contain part of the authors only.
        The condition is that the key starts with a given string.
        This string is specified with the parameter `key`.
        ```url
        https://ctan.org/json/1.1/authors?key=knuth
        ```
        The following example extracts
        all authors for which the key starts with the letter n:
        ```url
        https://ctan.org/json/1.1/authors?key=n
        ```
      externalDocs:
        url: https://ctan.org/help/json/1.1/authors
      parameters:
        - $ref: '#/components/parameters/key'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Authors
                type: array
                items:
                  $ref: '#/components/schemas/Author'
                description: List of authors.
  /json/1.1/author/{key}:
    get:
      summary: Author
      description: |
        The information about a single author can be obtained under the URL like
        ```url
        https://ctan.org/json/1.1/author/knuth
        ```
        The last element in the URl is the key of the author as used by CTAN.
        Those keys are also listed
        in the [list of authors](#/paths/~1json~11.1~1authors/get).

        The result is a JSON term as in the following listing:
        ```json
        { "key": "knuth", "givenname": "Donald E.", "familyname": "Knuth" }
        ```

        Note that the authors information does not contain
        the email address of the author to protect the privacy.

        #### References

        You can request that more information about the authors is provided.
        This information is the list of packages
        in which the author is mentioned.
        This is accomplished with the parameter `ref`.
        It can be set to `true` as in the following example:
        ```url
        https://ctan.org/json/1.1/author/knuth?ref=true
        ```
        This results in a JSON file like in the following listing:
        ```json
        {
          "key": "knuth",
          "givenname": "Donald E.",
          "familyname": "Knuth",
          "pkgs": ["latex-fonts", "cweb", "cm-mf", "cm", "cm-tfm", "..."]
        }
        ```
      externalDocs:
        url: https://ctan.org/help/json/1.1/author
      parameters:
        - name: key
          in: path
          description: The key of the author as used by CTAN.
          required: true
          schema:
            type: string
            examples: [knuth]
        - name: ref
          in: query
          description: Requests the list of the author's packages.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /json/1.1/topics:
    get:
      summary: List of Topics
      description: |
        The list of topics can be obtained under the URL
        ```url
        https://ctan.org/json/1.1/topics
        ```
        The result is a JSON file as in the following listing:
        ```json
        [
          { "key": "abbrev", "details": "macros for defining abbreviations in documents" },
          { "key": "abstract", "details": "typeset abstracts of documents" },
          { "key": "accessible", "details": "accessibility support" },
          { "key": "acrobat", "details": "relies on availability of Adobe Acrobat, etc." },
          { "key": "acronym", "details": "define and use acronyms" },
          { "key": "addr-list", "details": "lists of addresses, for a personal directory (or the like)" },
          { "key": "advert", "details": "small advertisements, fly sheets, etc." },
          { "key": "albanian", "details": "support for typesetting Albanian" },
          { "key": "alignment", "details": "tables, tab structures, etc" },
          { "key": "alignment-supp", "details": "ancillary code for tables, tab structures, etc" },
          { "key": "amharic", "details": "support for typesetting Amharic" },
          { "key": "apa", "details": "typesetting according to the rules of the American Psychological Association" },
          { "key": "appendix", "details": "Typsetting and using appendices" },
          { "key": "arabic", "details": "documentation in and support for typesetting Arabic" },
          "..."
        ]
        ```
        The topics contained in this list are
        ordered ascending on the key of the topic.

        #### Selecting

        The list can be restricted to contain part of the topics only.
        The condition is that the key starts with a given string.
        This string is specified with the parameter key.
        ```url
        https://ctan.org/json/1.1/topics?key=abbrev
        ```
        The following example extracts
        all topics for which the key starts with the letter n:
        ```url
        https://ctan.org/json/1.1/topics?key=n
        ```
      externalDocs:
        url: https://ctan.org/help/json/1.1/topics
      parameters:
        - $ref: '#/components/parameters/key'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Topics
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
                description: List of topics.
  /json/1.1/topic/{key}:
    get:
      summary: Topic
      description: |
        The information about a single topic can be obtained under the URL like
        ```url
        https://ctan.org/json/1.1/topic/cv
        ```
        The last element in the URl is the key of the topic as used by CTAN.
        Those keys are also listed
        in the [list of topics](#/paths/~1json~11.1~1topics/get).

        The result is a JSON object as in the following listing:
        ```json
        { "key": "cv", "details": "curriculum vitae/Resumé" }
        ```

        #### References

        You can request that more information about the topics is provided.
        This information is
        the list of packages in which the topic is mentioned.
        This is accomplished with the parameter `ref`.
        It can be set to `true` as in the following example:
        ```url
        https://ctan.org/json/1.1/topic/cv?ref=true
        ```
        This results in a JSON object like in the following listing;
        ```json
        {
          "key": "cv",
          "details": "curriculum vitae/Resumé",
          "packages": ["currvita", "cvsty", "cv", "curve", "ecv", "..."]
        }
        ```
        In this case the attribute `packages` contains a list of package keys.
        The keys are unique ~~and sorted alphabetically~~.
        > **Warning**:
        > Package keys do not seem to be sorted.
      externalDocs:
        url: https://ctan.org/help/json/1.1/topic
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
            examples: [abbrev, cv]
          description: The key of the topic as used by CTAN.
        - name: ref
          in: query
          schema:
            type: boolean
            default: false
          description: Requests the list of packages in the topic.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /json/1.1/packages:
    get:
      summary: List of Packages
      description: |
        The list of packages can be obtained under the URL
        ```url
        https://ctan.org/json/1.1/packages
        ```
        The result is an JSON file as in the following listing:
        ```json
        [
          { "key": "a0poster", "name": "a0poster", "caption": "Support for designing posters on large paper" },
          { "key": "a2ac", "name": "a2ac", "caption": "AFM to AFM plus Composites" },
          { "key": "a2ping", "name": "a2ping", "caption": "Advanced PS, PDF, EPS converter" },
          { "key": "a4", "name": "a4", "caption": "Support for A4 paper sizes" },
          { "key": "a4wide", "name": "a4wide", "caption": "\"Wide\" a4 layout" },
          { "key": "a5comb", "name": "a5comb", "caption": "Support for a5 paper sizes" },
          { "key": "aaai", "name": "aaai", "caption": "AAAI style" },
          { "key": "aaai-named", "name": "aaai-named", "caption": "BibTeX style for AAAI" },
          { "key": "aastex", "name": "aastex", "caption": "Macros for Manuscript Preparation for AAS Journals" },
          { "key": "abbr", "name": "abbr", "caption": "Simple macros supporting abreviations for Plain and LaTeX" },
          { "key": "abbrevs", "name": "abbrevs", "caption": "Text abbreviations in LaTeX" },
          { "key": "abc", "name": "abc", "caption": "Support ABC music notation in LaTeX" },
          { "key": "abc2mtex", "name": "abc2mtex", "caption": "Notate tunes stored in ABC notation" },
          "..."
        ]
        ```
        The packages contained in this list are
        ordered ascending on the key of the packages.

        #### Selecting

        The list can be restricted to contain part of the packages only.
        The condition is that the key starts with a given string.
        This string is specified with the parameter `key`.
        ```url
        https://ctan.org/json/1.1/packages?key=aaai
        ```
        The following example extracts
        all packages for which the key starts with the letter n:
        ```url
        https://ctan.org/json/1.1/packages?key=n
        ```
      externalDocs:
        url: https://ctan.org/help/json/1.1/packages
      parameters:
        - $ref: '#/components/parameters/key'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Packages
                type: array
                items:
                  $ref: '#/components/schemas/PackageSummary'
                description: List of package summaries.
  /json/1.1/pkg/{key}:
    get:
      summary: Package
      description: |
        The information about a single package can be
        obtained under the URL like
        ```url
        https://ctan.org/json/1.1/pkg/tex
        ```
        The last element in the URL is the key of the package as used by CTAN.
        in the [list of packages](#/paths/~1json~11.1~1packages/get).

        The result is a JSON object as in the following listing:
        ```json
        {
          "id": "tex",
          "name": "TeX",
          "caption": "A sophisticated typesetting engine",
          "authors": [{ "id": "knuth", "active": true }],
          "copyright": [{ "owner": "D. E. Knuth", "year": "1982" }],
          "license": "knuth",
          "version": { "number": "3.14159265", "date": "2014-01-07" },
          "descriptions": [{ "text": "...", "language": null }],
          "ctan": { "path": "/systems/knuth/dist/tex", "file": true },
          "miktex": "miktex-tex-bin-2.9",
          "texlive": "tex",
          "topics": ["engine"]
        }
        ```

        #### ~~Expanding Author Information~~

        ~~The author information is
        contained as id referencing an entry in the authors file.
        If the parameter `author-name` can be set to `true`
        to include the first name and family name of the author as well.
        Example:~~
        <pre>
        <del>https://ctan.org/json/1.1/pkg/tex?author-name=true</del>
        </pre>
        > **Warning**:
        > This does not seem to be working.

        #### Selecting Fields

        Sometimes it might be desirable to get some of the fields only.
        This can be accomplished with the parameter `drop`.
        It takes a comma separated list of fields to drop.
        Example:
        ```url
        https://ctan.org/json/1.1/pkg/tex?drop=documentation,description
        ```
      externalDocs:
        url: https://ctan.org/help/json/1.1/pkg
      parameters:
        - name: key
          in: path
          description: The key of the package as used by CTAN.
          required: true
          schema:
            type: string
            examples: [tex, texlive]
        - name: drop
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PackageAttribute'
            default: []
          style: form
          explode: false
          description: A comma separated list of fields to drop.
        - name: keep-url
          in: query
          schema:
            type: boolean
            default: false
          description: >-
            Always keeps valid URLs as attributes,
            instead of `ctan:`-prefixed ones.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /json/1.1/licenses:
    get:
      summary: List of Licenses
      description: |
        The list of licenses can be obtained under the URL
        ```url
        https://ctan.org/json/1.1/licenses
        ```
        The result is a JSON file as in the following listing:
        ```json
        [
          { "key": "apache2", "name": "Apache License, version 2.0", "free": true },
          { "key": "artistic", "name": "Perl Artistic License", "free": false },
          { "key": "artistic2", "name": "Perl Artistic License, version 2", "free": true },
          { "key": "bsd", "name": "BSD Style License", "free": true },
          { "key": "bsd2", "name": "FreeBSD License", "free": true },
          { "key": "bsd3", "name": "Simplified BSD License", "free": true },
          { "key": "bsd4", "name": "BSD License", "free": true },
          { "key": "fdl", "name": "Free Documentation License", "free": true },
          { "key": "gfl", "name": "The GUST Font License (GFL)", "free": true },
          { "key": "gfsl", "name": "The GUST Font Source License (GFSL)", "free": true },
          { "key": "gpl", "name": "GNU General Public License", "free": true },
          { "key": "gpl2", "name": "GNU General Public License, version 2", "free": true },
          { "key": "gpl3", "name": "GNU General Public License, version 3", "free": true },
          "..."
        ]
        ```
        The licenses contained in this list are
        ordered ascending on the key of the license.

        #### Selecting

        The list can be restricted to contain part of the licenses only.
        The condition is that the key starts with a given string.
        This string is specified with the parameter `key`.
        ```url
        https://ctan.org/json/1.1/licenses?key=gpl
        ```
        The following example extracts
        all topics for which the key starts with the letter n:
        ```url
        https://ctan.org/json/1.1/licenses?key=n
        ```
      externalDocs:
        url: https://ctan.org/help/json/1.1/licenses
      parameters:
        - $ref: '#/components/parameters/key'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Licenses
                type: array
                items:
                  $ref: '#/components/schemas/License'
                description: List of licenses.
  /search/json:
    get:
      summary: Searching
      description: |
        The search functionality can be used programmatically.
        This can be achieved with a HTTP `GET` request like
        ```url
        http://www.ctan.org/search/json?phrase=knuth
        ```

        #### Exceptions

        In case of an error the status code isn't `200`.
        The body of the response contains more or less meaningless text.

        #### [Tips for the Search](https://ctan.org/search)

        TL;DR: the extended search tries
        to interprete some words and characters specially.
        This is not just Google.

        The CTAN search provides some powerful features to express the query.
        You can use these features to get better results.
        Some of the features are described here.
        This feature list is by far not complete.
        It will be extended when required.

        - **Prefix Search**

          The search term is split into words. The search engine finds
          the items containing all search terms at the beginning of words.
          The comparison is performed case-insensitive.

          This is the same as adding the wildcard character `*`
          to the end of all words.
        - **Word-based Search**

          The search term is split into words. The search engine finds
          the items containing all search terms as words.
          The order of the words just influences the order of the hits.
          The comparison is performed case-insensitive.
        - **Wildcard Search**

          The meta-characters `*` and `?` can be contained in the search term
          to denote an arbitrary number of characters and
          a single character respective.
          ```plain
          bibtool*
          ```
          Note that wildcards are not allowed at the beginning of a word.
        - **Excluding words**

          Prefixing a word by `-` or `NOT` (in upper case)
          will exclude all hits for this word from the results.
          ```plain
          sudoku -related
          sudoku NOT related
          ```
        - **Boolean Combinations**

          A boolean query can be formulated
          with the operators `AND`, `OR`, and `NOT`.
          Parentheses can be used to group sub-expressions.
          ```plain
          tex AND NOT knuth
          ```
        - **Fuzzy Search**

          If you are not sure about the spelling of your search
          you can initiate a fuzzy search.
          For this purpose append a `~` to the search word.
          This search also returns hits which
          are not literal matches but variations thereof.
          ```plain
          bibtol~
          ```
          Note that fuzzy search usually returns lots of hits. Thus be careful.
      externalDocs:
        url: https://ctan.org/help/json/1.1/searching
      parameters:
        - name: phrase
          in: query
          required: true
          schema:
            type: string
          description: >-
            The search phrase,
            i.e. the words or search expressions to query for.
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
          description: >-
            The offset for paging.
            The accompanying parameter `max` contains the page size.
            This parameter contains the first hit to be returned.
            If a negative number is passed in then it is replaced by `0`.
            If the offset is larger than the number of actual hits
            then the list of hits will be empty.
        - name: max
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 256
            default: 16
          description: >-
            The number of hits maximally returned.
            Larger values will be reduced to `256`.
            Lower values will be replaced by the default value.
        - name: ext
          in: query
          schema:
            type: boolean
            default: false
          description: >-
            Whether the sections are requested explicitly.
            If the value is `false` then all default sections are searched.
            Otherwise the sections to be searched have to be
            specified with additional parameters.
        - name: PKG
          in: query
          schema:
            type: boolean
            default: false
          description: >-
            Whether the package section should be included into the search.
            The package section contains
            the text fields of a package entry in the Catalogue.
        - name: AUTHORS
          in: query
          schema:
            type: boolean
            default: false
          description: >-
            Whether the author section should be included into the search.
            The author section contains
            the names of the contributors in the Catalogue.
        - name: TOPICS
          in: query
          schema:
            type: boolean
            default: false
          description: >-
            Whether the topics section should be included into the search.
            The topics section contains
            the text fields of the topics in the Catalogue.
        - name: FILES
          in: query
          schema:
            type: boolean
            default: false
          description: |
            > **Warning**: This attribute is not documented, but
            > is used in the search form of the CTAN web page and
            > seems to determine whether the file name in TeX archive
            > should be included into the search.
        - name: PORTAL
          in: query
          schema:
            type: boolean
            default: false
          description: >-
            Whether the portal section should be included into the search.
            The portal section contains the text of the portal pages.
        - name: wildcard
          in: query
          schema:
            type: boolean
            default: false
          description: |
            > **Warning**:
            > This attribute is not documented, but
            > is used in the search form of the CTAN web page and
            > seems to enable [prefix search](#tips-for-the-search).
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
  /json/1.1/version:
    get:
      summary: Version
      description: |
        The information about the version of the interface can be
        obtained under the URL
        ```url
        https://ctan.org/json/1.1/version
        ```
        The result is a JSON object as in the following listing:
        ```json
        { "version": "1.1" }
        ```
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    const: '1.1'
                    description: The version number as string.
                required: [version]
components:
  schemas:
    Author:
      title: Author
      description: Information about an author.
      type: object
      properties:
        key:
          type: string
          minLength: 1
          description: The key of the author.
        givenname:
          type: string
          default: ''
          description: The given name.
        familyname:
          type: string
          default: ''
          description: The family name.
        pkgs:
          type: array
          items:
            type: string
            minLength: 1
          uniqueItems: true
          description: |
            List of ids of packages mentioning the author.
            This attribute is included
            if the query parameter `ref` is set to `true`.
            > **Warning**:
            > This attribute is
            > [documented](https://ctan.org/help/json/1.1/author)
            > under the incorrect name `packages`.
      required: [key, givenname, familyname]
      examples:
        - key: knuth
          givenname: Donald E.
          familyname: Knuth
    Topic:
      title: Topic
      description: Information about a topic.
      type: object
      properties:
        key:
          type: string
          minLength: 1
          description: The key of the topic.
        details:
          type: string
          description: A short descriptive text about the meaning of the topic.
        packages:
          type: array
          items:
            type: string
            minLength: 1
          uniqueItems: true
          description: |
            The list of ids of packages referring to the topic.
            This attribute is included if the parameter `ref` is set to `true`.
            > **Warning**:
            > This attribute is
            > [documented](https://ctan.org/help/json/1.1/topic)
            > under the incorrect name `references`.
          examples:
            - [
              cv, cvsty, currvita, curve, ecv, europecv, esieecv, harnon-cv,
              ibmres-tex, koma-moderncvclassic, moderncv, mycv,
              moderntimeline, res, resumemac, simplecv, tucv,
              translation-ecv-de, translation-europecv-de, vita, vita209,
              resumecls, pas-cv, cv4tw, komacv, europasscv, bewerbung,
              gradstudentresume, nihbiosketch, simple-resume-cv, komacv-rg,
              limecv, readablecv, biblatex-cv
            ]
      required: [key, details]
      examples:
        - key: cv
          details: curriculum vitae/Resumé
    PackageSummary:
      title: PackageSummary
      description: Summary of a package.
      type: object
      properties:
        key:
          type: string
          minLength: 1
          description: The key of the package.
        name:
          type: string
          description: The name of the package.
        caption:
          type: string
          description: |
            A short descriptive text about the content of the package.
            > **Warning**:
            > This attribute is
            > [documented](https://ctan.org/help/json/1.1/packages)
            > under the incorrect name `detailed`.
      required: [key, name, caption]
    Package:
      title: Package
      description: Information about a package.
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: The unique id of the package.
        name:
          type: string
          description: The print representation of the package name.
        caption:
          type: string
          description: A short description of the package.
        authors:
          type: array
          items:
            $ref: '#/components/schemas/PackageAuthor'
          description: The list of authors.
        copyright:
          type: array
          items:
            $ref: '#/components/schemas/Copyright'
          description: The information about the copyright.
        license:
          oneOf:
            - $ref: '#/components/schemas/LicenseIdentifier'
            - title: LicenseIdentifiers
              type: array
              items:
                $ref: '#/components/schemas/LicenseIdentifier'
              uniqueItems: true
          description: The keys of licenses.
        version:
          allOf:
            - $ref: '#/components/schemas/PackageVersion'
          description: Information about the version of the package.
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/PackageDescription'
          description: Long descriptions of the package.
        documentation:
          type: array
          items:
            $ref: '#/components/schemas/PackageDocumentation'
          description: List of references to documentation.
        ctan:
          type: object
          properties:
            path:
              type: string
              description: The relative path of the package in the CTAN tree.
            file:
              type: boolean
              default: false
              description: >-
                The indicator that this package consists of a single file only.
          required: [path]
          description: The location of the package in the CTAN tree.
        install:
          type: string
          description: |
            The location of the package on CTAN
            relative to the CTAN directory `/install`
            in form of an installable TDS-compliant zip archive.
            > **Warning**:
            > This attribute is incorrectly
            > [documented](https://ctan.org/help/json/1.1/pkg)
            > as having an `object` type.
        miktex:
          type: string
          description: |
            The name of the package in MiKTeX.
            > **Warning**:
            > This attribute is incorrectly
            > [documented](https://ctan.org/help/json/1.1/pkg)
            > as having an `object` type.
        texlive:
          type: string
          description: |
            The name of the package in TeX Live.
            > **Warning**:
            > This attribute is incorrectly
            > [documented](https://ctan.org/help/json/1.1/pkg)
            > as having an `object` type.
        index:
          type: array
          items:
            type: string
          description: A list of extra terms to be indexed for the search.
        topics:
          type: array
          items:
            type: string
          description: A list of topics keys for this entry.
        home:
          type: string
          format: uri
          description: The URL of the home page of the package.
        also:
          type: array
          items:
            type: string
          description: |
            > **Warning**:
            > This attribute is not documented, but seems to be
            > an array containing keys of related packages.
      required: [id, name, caption, authors, descriptions, documentation]
    PackageAuthor:
      title: PackageAuthor
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: The key of the author.
        active:
          type: boolean
          description: |
            > **Warning**: This attribute is not documented.
      required: [id, active]
      description: Information about a package author.
    Copyright:
      title: Copyright
      type: object
      properties:
        owner:
          type: string
          description: The name of the copyright holder.
        year:
          # e.g., https://ctan.org/json/1.1/pkg/tex
          type: [string, 'null']
          description: The year or years of the copyright.
      required: [owner, year]
    PackageVersion:
      title: PackageVersion
      type: object
      properties:
        number:
          type: string
          description: The version number.
        date:
          type: string
          description: The version date.
      minProperties: 1
      description: Information about the version of a package.
    PackageDescription:
      title: PackageDescription
      type: object
      properties:
        text:
          type: string
          description: |
            The longer description of the package,
            which may include HTML markup.
            An inner tag `<ref>` is
            used to reference a package with attribute `refid`.
            > **Warning**:
            > This attribute is
            > [documented](https://ctan.org/help/json/1.1/pkg)
            > under the incorrect name `description`.
          examples:
            - |
                <p>
                  A comprehensive TeX system that you can install on your hard disk. It
                  includes support for most Unix system architectures, including
                  GNU/Linux and MacOS, and for Windows. The <ref refid=\"mactex\">MacTeX</ref>
                  distribution is an unchanged TeX Live plus some Mac-specific
                  software, but is distributed in a separate archive.
                </p>
                <p>
                  The TeX, PDF(e)TeX, XeTeX, LuaTeX, and other engines are provided in the
                  distribution, with several different running formats each; a wide
                  range of support programs and macro packages is also included.
                </p>
                <p>
                  Beware: the download from CTAN is large (several GB); it comes
                  in the form of an ISO image, and is available from CTAN mirrors
                  through the `Sources' link below.
                </p>
                <p>
                  <a href=\"https://tug.org/texlive/acquire.html\">Other ways to
                  acquire TeX Live</ref> include network installation, tarballs, and
                  mirroring.
                </p>
        language:
          type: [string, 'null']
          description: |
            The ISO code for the language of the description.
            Alternately it may be `null` to indicate the default language,
            i.e. English.
            > **Warning**:
            > This attribute is
            > [documented](https://ctan.org/help/json/1.1/pkg)
            > under the incorrect name `lang`.
      description: A long description of a package.
    PackageDocumentation:
      title: PackageDocumentation
      type: object
      properties:
        language:
          type: [string, 'null']
          description: |
            The ISO code for the language of the description.
            > **Warning**:
            > This attribute is
            > [documented](https://ctan.org/help/json/1.1/pkg)
            > under the incorrect name `lang`.
        details:
          type: string
          description: >-
            The (English) text describing this documentation item.
        href:
          type: string
          format: uri
          description: >-
            A reference to the documentation.
            The prefix `ctan:` indicates
            a reference to a directory on CTAN.
            If the parameter `keep-url` is `true`
            then this attribute contains
            always a valid URL without the `ctan:` prefix.
    PackageAttribute:
      title: PackageAttribute
      type: string
      enum: [
        authors, caption, copyright, ctan,
        descriptions, documentation, home, index, install, miktex,
        name, texlive, topics, version
      ]
    LicenseIdentifier:
      title: LicenseIdentifier
      description: Identifier of a license.
      type: string
      enum: [
        apache2, artistic, artistic2, bsd, bsd2, bsd3, bsd4,
        cc-by-1, cc-by-2, cc-by-3, cc-by-4,
        cc-by-nc-1, cc-by-nc-2, cc-by-nc-3, cc-by-nc-4,
        cc-by-nc-nd-1, cc-by-nc-nd-2, cc-by-nc-nd-2.5,
        cc-by-nc-nd-3, cc-by-nc-nd-4, cc-by-nc-sa4,
        cc-by-nd-1, cc-by-nd-2, cc-by-nd-3, cc-by-nd-4,
        cc-by-sa-1, cc-by-sa-2, cc-by-sa-3, cc-by-sa-4,
        cc0, eupl, fdl, gfl, gfsl, gpl, gpl1, gpl1+, gpl2, gpl2+, gpl3, gpl3+,
        isc, knuth, lgpl, lgpl2.1, lgpl3, lppl, lppl1, lppl1.2,
        lppl1.3, lppl1.3a, lppl1.3b, lppl1.3c, mit,
        nocommercial, nosell, nosource, ofl, opl,
        other-free, other-nonfree, pd, shareware, x11, noinfo
      ]
    License:
      title: License
      description: Information about a license.
      type: object
      properties:
        key:
          allOf:
            - $ref: '#/components/schemas/LicenseIdentifier'
          description: The key of the license.
        name:
          type: string
          description: The printable name of the license.
        free:
          type: boolean
          description: The indication whether the license is considered free.
      required: [key, name, free]
    SearchResult:
      title: SearchResult
      description: Search result.
      type: object
      properties:
        numberOfHits:
          type: integer
          minimum: 0
          description: The total number of hits found.
        offset:
          type: integer
          minimum: 0
          description: >-
            The offset at which the hits start.
            It is a repetition of the input argument `offset`
            which might have been adapted.
        max:
          type: integer
          minimum: 1
          maximum: 256
          description: >-
            The maximal number of hits in this junk.
            It is a repetition of the input argument `max`
            which might have been adapted.
        phrase:
          type: string
          description: >-
            The search phrase.
            It is a repetition of the input argument `phrase`
            which might have been adapted.
        hits:
          type: array
          items:
            $ref: '#/components/schemas/SearchHit'
          description: The list of hits in this junk.
      required: [numberOfHits, offset, max, phrase, hits]
    SearchHit:
      title: SearchHit
      type: object
      properties:
        title:
          type: string
          description: The page title of the hit.
        path:
          type: string
          description: The absolute path on the CTAN Portal of the hit.
        text:
          type: string
          description: Some additional text to display.
      required: [title, path, text]
      description: Search hit.
    NotFound:
      title: NotFound
      description: Not Found
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
            const: Not found
          minItems: 1
          maxItems: 1
      required: [errors]
  parameters:
    key:
      name: key
      in: query
      schema:
        type: string
      description: >-
        If set,
        only items with keys starting with the given string will be returned.
